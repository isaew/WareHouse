<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        BwDwAA8A+AAfAP4AfwA=
</value>
  </data>
</root>